{"version":3,"sources":["flightDetails/FlightDetails.js","searchForm/SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["FlightDetails","props","className","fare","flightId","srcCode","destCode","remainingSeats","Date","departureDate","toLocaleDateString","departure","arrival","Button","variant","color","useStyles","makeStyles","theme","root","margin","width","sliderClass","SearchForm","useState","source","setSource","destination","setDestination","deprtDate","setDeprtDate","price","setPrice","passengers","setPassengers","classes","handleChange","event","target","id","value","handleSeachAction","onSearch","src","dest","departdate","noValidate","autoComplete","TextField","label","placeholder","onChange","utils","DateFnsUtils","DatePicker","date","animateYearScrolling","format","minDate","InputLabel","Select","labelId","Array","from","keys","map","val","MenuItem","onClick","style","border","borderRadius","boxSizing","textAlign","Slider","e","priceRange","valueLabelDisplay","max","min","step","marks","App","SearchQuery","setSearchQuery","filterFlightData","flight","isValid","trim","toLowerCase","parseInt","slice","departure_date","remaing_seats","SearchData","newQuery","SearchCriteria","charAt","toUpperCase","d","getDate","getMonth","getFullYear","prepareHeader","results","flightData","filter","flight_id","source_code","destination_code","departs_at","arrives_at","length","prepareResultFlights","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0c559fe6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FlightDetails.css';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport default function FlightDetails(props) {\r\n    return (\r\n        <div className=\"Flight-details\">\r\n            <div className=\"Flight-info\">\r\n                <h1>{props.fare}</h1>\r\n                <p>{props.flightId}</p>\r\n                <h3>{`${props.srcCode} > ${props.destCode}`}</h3>\r\n                <p>{`Remaining Seats: ${props.remainingSeats}`}</p>\r\n                <h3>{`Depart at: ${new Date(props.departureDate).toLocaleDateString()} ${props.departure}`}</h3>\r\n                <h3>{`Arrival at: ${props.arrival}`}</h3>\r\n            </div>\r\n            <div className=\"Book-Block\">\r\n                <div className='Flight-Ad'></div>\r\n                <Button variant=\"contained\" color=\"primary\">Book Flight</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: '5px 5px',\r\n        '& > *': {\r\n            margin: '5px 5px',\r\n            width: '100%',\r\n        },\r\n    },\r\n    sliderClass: {\r\n        margin: '36px 10px',\r\n        width: '90%'\r\n    }\r\n}));\r\nexport default function SearchForm(props) {\r\n    const [source, setSource] = useState('');\r\n    const [destination, setDestination] = useState('');\r\n    const [deprtDate, setDeprtDate] = useState(null);\r\n    const [price, setPrice] = useState([0, 10000]);\r\n    const [passengers, setPassengers] = useState(1);\r\n\r\n\r\n    const classes = useStyles();\r\n    const handleChange = (event) => {\r\n        if (event.target.id === 'source')\r\n            setSource(event.target.value);\r\n        else if (event.target.id === 'destination')\r\n            setDestination(event.target.value);\r\n    }\r\n    const handleSeachAction = () => {\r\n        props.onSearch({ src: source, dest: destination, departdate: deprtDate && deprtDate.toLocaleDateString(), price: price, passengers: passengers })\r\n    }\r\n    const handleReset = () => {\r\n        setSource('');\r\n        setDestination('');\r\n        setDeprtDate(null);\r\n        setPrice([0, 10000]);\r\n        setPassengers(1);\r\n        props.onSearch({ src: '', dest: '', departdate: null, price: [0, 10000], passengers: 1 })\r\n    }\r\n    const createMenuItems = () => {\r\n        return Array.from(Array(11).keys()).map((val) => {\r\n            return val <= 0 ? null : (<MenuItem value={val}>{val}</MenuItem>);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form className={classes.root} noValidate autoComplete=\"off\">\r\n                <TextField id=\"source\" value={source} label=\"Source City\" placeholder=\"Enter Origin City\" onChange={handleChange} />\r\n                <TextField id=\"destination\" value={destination} label=\"Destination City\" placeholder=\"Enter Destination City\" onChange={handleChange} />\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <DatePicker\r\n                        label=\"Departure Date\"\r\n                        value={deprtDate}\r\n                        onChange={(date) => { setDeprtDate(date); }}\r\n                        animateYearScrolling\r\n                        variant='inline'\r\n                        format=\"dd/MM/yyyy\"\r\n                        minDate={new Date()}\r\n                    />\r\n                </MuiPickersUtilsProvider>\r\n\r\n                <InputLabel id=\"passengers\">Passengers</InputLabel>\r\n                <Select\r\n                    labelId=\"passengers\"\r\n                    id=\"passengers-select\"\r\n                    value={passengers}\r\n                    onChange={(event) => setPassengers(event.target.value)}\r\n                    variant={'outlined'}\r\n                >\r\n                    {createMenuItems()}\r\n                </Select>\r\n\r\n                <Button variant=\"outlined\" color=\"primary\" onClick={handleSeachAction}>\r\n                    Search\r\n                </Button>\r\n                <Button variant=\"outlined\" color=\"primary\" onClick={handleReset}>\r\n                    Reset Search\r\n                </Button>\r\n            </form>\r\n            <div className='Refine-Search' style={{\r\n                margin: '45px 5px 0px 0px',\r\n                border: '2px solid #cec9c9',\r\n                borderRadius: '12px',\r\n                boxSizing: 'border-box'\r\n            }}>\r\n                <h3 style={{\r\n                    textAlign: 'left',\r\n                    margin: '0px 14px'\r\n                }}>Refine flight search</h3>\r\n                <Slider\r\n                    className={classes.sliderClass}\r\n                    value={price}\r\n                    onChange={(e, priceRange) => {\r\n                        setPrice(priceRange);\r\n                        handleSeachAction();\r\n                    }}\r\n                    valueLabelDisplay=\"auto\"\r\n                    max={15000}\r\n                    min={0}\r\n                    step={500}\r\n                    marks={true}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}","import React, { useState } from 'react';\nimport './App.css';\nimport flightData from './flights.json'\nimport FlightDetails from './flightDetails/FlightDetails';\nimport SearchForm from './searchForm/SearchForm';\n\nfunction App() {\n\n  const [SearchQuery, setSearchQuery] = useState({ src: '', dest: '', price: [0, 10000], passengers: 1 });\n\n  const updateSearchQuery = (SearchData) => {\n    const newQuery = {\n      ...SearchData\n    }\n    setSearchQuery(newQuery);\n  };\n  const filterFlightData = (flight) => {\n    let isValid = true;\n    if (SearchQuery.src.trim() !== '' && SearchQuery.src.toLowerCase().trim() !== flight.source.toLowerCase().trim())\n      isValid = false;\n    if (SearchQuery.dest.trim() !== '' && SearchQuery.dest.toLowerCase().trim() !== flight.destination.toLowerCase().trim())\n      isValid = false\n    if (SearchQuery.price[0] > parseInt(flight.fare.slice(3)) || parseInt(flight.fare.slice(3)) > SearchQuery.price[1])\n      isValid = false;\n    if (SearchQuery.departdate && SearchQuery.departdate !== flight.departure_date)\n      isValid = false\n    if (SearchQuery.passengers > flight.remaing_seats)\n      isValid = false\n    return isValid;\n  }\n  const prepareHeader = () => {\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let SearchCriteria = '';\n    if (!SearchQuery.src && !SearchQuery.dest && !SearchQuery.date)\n      SearchCriteria = `Showing all results`;\n    if (SearchQuery.src && SearchQuery.dest)\n      SearchCriteria = SearchQuery.src.charAt(0).toUpperCase() + SearchQuery.src.slice(1) + ' > ' + SearchQuery.dest.charAt(0).toUpperCase() + SearchQuery.dest.slice(1);\n    if (SearchCriteria !== '' && SearchQuery.departdate) {\n      const d = (new Date(SearchQuery.departdate));\n      SearchCriteria += ` on ${d.getDate()}-${months[d.getMonth()]}-${d.getFullYear()}`;\n    } return SearchCriteria;\n  }\n\n  const prepareResultFlights = () => {\n    const results = flightData.filter(filterFlightData).map((flight) => (\n      <FlightDetails\n        flightId={flight.flight_id}\n        srcCode={flight.source_code}\n        destCode={flight.destination_code}\n        fare={flight.fare}\n        departure={flight.departs_at}\n        arrival={flight.arrives_at}\n        departureDate={flight.departure_date}\n        remainingSeats={flight.remaing_seats}\n      />\n    ))\n    return results.length <= 0 ? 'No Results found!' : results;\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1>Flight Search Engine</h1>\n      </div>\n      <div className=\"App-content\">\n        <div className=\"Search-form\">\n          <SearchForm onSearch={updateSearchQuery}></SearchForm>\n        </div>\n        <div className=\"Flight-results\">\n          <div className=\"Search-header\">\n            <h2>{prepareHeader()}</h2>\n            <h3>{`Price : Rs. ${SearchQuery.price[0]} - Rs. ${SearchQuery.price[1]}`}</h3>\n          </div>\n          <div className=\"Search-content\">\n            {prepareResultFlights()}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}